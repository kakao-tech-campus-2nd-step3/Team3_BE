name: CD (자동배포)

on:
  push:
    branches:
      - develop
      - feat/96-feature-bluegreen

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Java 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Set Image Tag
        id: image_tag
        run: echo "IMAGE_TAG=$(date +'%Y-%m-%d_%H-%M-%S')-$(echo ${{ github.sha }} | cut -c1-8)" >> $GITHUB_ENV

      - name: Decode env.properties from GitHub Secrets
        run: |
          echo "${{ secrets.ENV_FILE }}" | base64 --decode > ./env.properties

      - name: Decode Firebase config from GitHub Secrets
        run: |
          echo "${{ secrets.FIREBASE_CONFIG }}" | base64 --decode > ./splanet-firebase.json

      - name: Transfer env.properties to EC2
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "./env.properties"
          target: "/home/ubuntu/"

      - name: Transfer splanet-firebase.json to EC2
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "./splanet-firebase.json"
          target: "/home/ubuntu/"

      - name: Determine Current Version
        id: current_version
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            if sudo docker ps --filter "name=splanet_blue" --format "{{.Names}}" | grep -q "splanet_blue"; then
              echo "::set-output name=version::blue"
            elif sudo docker ps --filter "name=splanet_green" --format "{{.Names}}" | grep -q "splanet_green"; then
              echo "::set-output name=version::green"
            else
              echo "::set-output name=version::none"
            fi

      - name: Determine New Version
        id: determine_new_version
        run: |
          if [ "${{ steps.current_version.outputs.version }}" == "blue" ]; then
            echo "NEW_VERSION=green" >> $GITHUB_ENV
            echo "NEW_PORT=8081" >> $GITHUB_ENV
          else
            echo "NEW_VERSION=blue" >> $GITHUB_ENV
            echo "NEW_PORT=8080" >> $GITHUB_ENV
          fi
          # 설정된 값을 다시 출력하여 확인
          echo "NEW_VERSION=${{ env.NEW_VERSION }}" > new_version.env
          echo "NEW_PORT=${{ env.NEW_PORT }}" >> new_version.env

      - name: Load New Version
        run: source new_version.env

      - name: Deploy New Version to EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: |
            IMAGE_TAG=${{ env.IMAGE_TAG }}
            NEW_VERSION=${{ env.NEW_VERSION }}
            NEW_PORT=${{ env.NEW_PORT }}
          script: |
            sudo docker pull kimsongmok/splanet:${{ env.IMAGE_TAG }}
            sudo docker network inspect splanet >/dev/null 2>&1 || sudo docker network create splanet
            sudo docker run -d --name splanet_${{ env.NEW_VERSION }} \
              --network splanet \
              --env-file /home/ubuntu/env.properties \
              -p ${{ env.NEW_PORT }}:8080 --restart unless-stopped kimsongmok/splanet:${{ env.IMAGE_TAG }}

      - name: Wait for Spring Boot Application to Start
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: |
            NEW_PORT=${{ env.NEW_PORT }}
            NEW_VERSION=${{ env.NEW_VERSION }}
          script: |
            echo "Waiting for the application to be healthy on http://api.splanet.co.kr:${NEW_PORT}/actuator/health..."
            for i in {1..30}; do
              if curl -s http://api.splanet.co.kr:${NEW_PORT}/actuator/health | grep '"status":"UP"' > /dev/null; then
                echo "Application is healthy and ready to receive traffic."
                break
              fi
              echo "Waiting for application to start... (Attempt $i)"
              sleep 5
            done

            if [ "$i" -eq 30 ]; then
              echo "Application did not start successfully within the expected time."
              sudo docker logs splanet_${NEW_VERSION}
              exit 1
            fi

      - name: Update Load Balancer Target Group
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: |
            CURRENT_VERSION=${{ steps.current_version.outputs.version }}
          script: |
            if [ "$CURRENT_VERSION" == "blue" ]; then
              TARGET_GROUP_ARN="arn:aws:elasticloadbalancing:ap-northeast-2:${{ secrets.AWS_ACCOUNT_ID }}:targetgroup/splanet-8081/${{ secrets.ARN_ID_8081 }}"
            else
              TARGET_GROUP_ARN="arn:aws:elasticloadbalancing:ap-northeast-2:${{ secrets.AWS_ACCOUNT_ID }}:targetgroup/splanet/${{ secrets.ARN_ID_8080 }}"
            fi
            aws elbv2 modify-listener --listener-arn arn:aws:elasticloadbalancing:ap-northeast-2:${{ secrets.AWS_ACCOUNT_ID }}:listener/app/splanet/${{ secrets.ARN_ID_443 }} \
              --default-actions Type=forward,TargetGroupArn=$TARGET_GROUP_ARN

      - name: Remove Old Version
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: |
            CURRENT_VERSION=${{ steps.current_version.outputs.version }}
          script: |
            if [ "$CURRENT_VERSION" != "none" ]; then
              sudo docker stop splanet_$CURRENT_VERSION
              sudo docker rm splanet_$CURRENT_VERSION
            fi

      - name: Clean up old Docker images
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker image ls --format "{{.ID}} {{.Repository}}:{{.Tag}}" | grep 'kimsongmok/splanet' | tail -n +4 | awk '{print $1}' | xargs docker rmi -f
            sudo docker system prune -f
